// 방문자 패턴의 의미!!
class Shape
{
	virtual void Draw() = 0;
	virtual void Move() = 0; // 나중에 이렇게 가상함수를 추가하는 것은!!!
							// 이미 만들어진 모든 도형을 수정해야 한다!!! 어렵다!
};
class Rect   : public Shape {};
class Circle : public Shape {};


// 전통적인 객체지향 디자인
// => ? 자리에 "쉽다"  "어렵다" 로 채워 보세요.
// 클래스의   추가 : 쉽다. 
//					다형성을 잘 사용해서 설계했다면, 새로운 클래스가 추가되어도
//				    기존 코드는 수정할 필요 없다.(OCP 원칙을 지켰다면)
// 
// 가상함수(오퍼레이션)의 추가 : 어렵다!!! 이미 만들어진 모든 클래스를 수정해야 한다
//----------------------------------------------------------------


// 그런데, Move()라는 가상함수를 추가하지말고!!
ShapeMoveVisitor v;
컨테이너.accept(&v); // 이렇게 하면 ??


// 방문자 패턴으로 디자인 하면
// 클래스의 추가   :  어렵다!!
//					방문자3.cpp, 메뉴 예제에서, 
//					PopupMenu, MenuItem 외에, SpeicialMenu 등의 클래스가 추가되면
//					"IMenuVisitor" 인터페이스가 수정되게 됩니다.
//					이미 만들어둔 모든 방문자 코드가 변해야 합니다.
// 
// 가상 함수의 추가 : 쉽다, 진짜 가상함수를 추가하는 것이 아니라
//					가상함수가 할일을 방문자로 만들라는 의미!!!



// 결론 : 어떤 시스템을 구축할때..
//        미래의 요구 사항을 분석해서.!!!

// 새로운 클래스가 추가될일은 많은데, 오퍼레이션(기능, 가상함수)가 추가될일은 드물다.
// => 방문자 패턴을 사용할 필요 없고, 전통적인 다형성 기반의 디자인 사용


// 새로운 클래스가 추가될 일은 없는데, 오퍼레이션(기능, 가상함수)가 추가될 경우가 많다면
// => 초기 시스템 전체 디자인을 방문자패턴으로 설계
// => 요구사항이 생길때 마다, 해당 기능을 수행하는 방문자들을 설계하면 됩니다

